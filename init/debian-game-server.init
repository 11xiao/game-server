#! /bin/sh
# chkconfig: 2345 55 25
# Description: Startup script for Game-Server(XiaoBao) on Debian. Place in /etc/init.d and
# run 'update-rc.d -f game-server defaults', or use the appropriate command on your
# distro. For CentOS/Redhat run: 'chkconfig --add game-server'

### BEGIN INIT INFO
# Provides:          game-server
# Required-Start:    $all
# Required-Stop:     $all
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: starts the game-server
# Description:       starts game-server using start-stop
### END INIT INFO

PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin
ProgramName="Game-Server(XiaoBao)"
ProgramPath="/usr/local/game-server"
NAME=game-server
BIN=${ProgramPath}/$NAME
CONFIGFILE=${ProgramPath}/config.json
LOGFILE=${ProgramPath}/game-server.log
SCRIPTNAME=/etc/init.d/$NAME
PID_DIR=/var/run
PID_FILE=$PID_DIR/game-server.pid
RET_VAL=0

[ -x $BIN ] || exit 0

fun_check_run()
{
    if [ -r $PID_FILE ]; then
        read PID <$PID_FILE
        if [ -d "/proc/$PID" ]; then
          return 0
        else
          rm -f $PID_FILE
          return 1
        fi
      else
        return 2
  fi
}
fun_status()
{
    fun_check_run
    case $? in
    0)
      echo "${ProgramName} running with PID \033[40;32m${PID}\033[0m"
      ;;
    1)
      echo "${ProgramName} not running, remove PID file ${PID_FILE}"
      ;;
    2)
      echo "Could not find PID file ${PID_FILE}, ${ProgramName} does not appear to be running"
      ;;
  esac
  return 0
}
fun_start()
{
    if [ ! -d $PID_DIR ]; then
        mkdir -p $PID_DIR || echo "failed creating PID directory ${PID_DIR}"; exit 1
    fi
    if fun_check_run; then
        echo "${ProgramName} already running with PID \033[40;32m${PID}\033[0m"
        return 0
    fi
    if [ ! -r ${CONFIGFILE} ]; then
        echo "config file ${CONFIGFILE} not found"
        return 1
    fi
    echo "Starting ${ProgramName}..."
    ${BIN} -c ${CONFIGFILE} > ${LOGFILE} 2>&1 &
    PID=$!
    echo $PID > $PID_FILE
    sleep 0.3
    if ! fun_check_run; then
        echo "start failed"
        return 1
    fi
    echo "${ProgramName} is running, ProcessID is \033[40;32m${PID}\033[0m."
    echo "read ${LOGFILE} for log"
    return 0
}

fun_stop(){
    if fun_check_run; then
        echo "Stopping ${ProgramName} with PID \033[40;32m${PID}\033[0m."
        kill $PID
        rm -f $PID_FILE
    else
        echo "not find PID file $PID_FILE"
    fi
}

fun_restart(){
    fun_stop
    fun_start
}

case "$1" in
    start|stop|restart|status)
        fun_$1
    ;;
    *)
        echo "Usage: $SCRIPTNAME {start|stop|restart|status}"
        RET_VAL=1
    ;;
esac
exit $RET_VAL
